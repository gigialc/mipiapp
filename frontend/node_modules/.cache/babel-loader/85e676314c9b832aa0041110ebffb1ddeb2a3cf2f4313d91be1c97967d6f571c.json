{"ast":null,"code":"// Import the Socket type from socket.io-client\n//import { SocketContext } from '../contexts/SocketContext';\n{/*\n function Chat() {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [message, setMessage] = useState<string>('');\n  //const socket: Socket = useContext(SocketContext); // Specify the type of socket\n {/*\n  // Handling new messages\n  useEffect(() => {\n    const messageListener = (newMessage: string) => {\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    };\n    \n    socket.on('message', messageListener);\n     return () => {\n      socket.off('message', messageListener);\n    };\n  }, [socket]);\n   const messageEndRef = useRef<HTMLDivElement>(null); // Specify the type of the ref\n   // Scroll to the latest message\n  useEffect(() => {\n    messageEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n   const sendMessage = () => {\n    if (message.trim()) {\n      socket.emit('message', message);\n      setMessage('');\n    }\n  };\n   return (\n    <div>\n      <h1>Chat App</h1>\n      <div className=\"chat-box\">\n        {messages.map((msg, index) => (\n          <div key={index}>{msg}</div>\n        ))}\n        <div ref={messageEndRef} />\n      </div>\n      <input\n        type=\"text\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n      />\n      <button onClick={sendMessage}>Send</button> \n    </div>\n  );\n }\n export default Chat;\n */}\nexport {};","map":{"version":3,"names":[],"sources":["/Users/georgina/DestigFemmeDemoPi/frontend/src/Shop/pages/chat.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\nimport io, { Socket } from 'socket.io-client'; // Import the Socket type from socket.io-client\n//import { SocketContext } from '../contexts/SocketContext';\n{/*\nfunction Chat() {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [message, setMessage] = useState<string>('');\n  //const socket: Socket = useContext(SocketContext); // Specify the type of socket\n {/*\n  // Handling new messages\n  useEffect(() => {\n    const messageListener = (newMessage: string) => {\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    };\n    \n    socket.on('message', messageListener);\n\n    return () => {\n      socket.off('message', messageListener);\n    };\n  }, [socket]);\n\n  const messageEndRef = useRef<HTMLDivElement>(null); // Specify the type of the ref\n\n  // Scroll to the latest message\n  useEffect(() => {\n    messageEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const sendMessage = () => {\n    if (message.trim()) {\n      socket.emit('message', message);\n      setMessage('');\n    }\n  };\n\n  return (\n    <div>\n      <h1>Chat App</h1>\n      <div className=\"chat-box\">\n        {messages.map((msg, index) => (\n          <div key={index}>{msg}</div>\n        ))}\n        <div ref={messageEndRef} />\n      </div>\n      <input\n        type=\"text\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n      />\n      <button onClick={sendMessage}>Send</button> \n    </div>\n  );\n}\n\nexport default Chat;\n*/}"],"mappings":"AAC+C;AAC/C;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAhDC;AAsDE"},"metadata":{},"sourceType":"module","externalDependencies":[]}