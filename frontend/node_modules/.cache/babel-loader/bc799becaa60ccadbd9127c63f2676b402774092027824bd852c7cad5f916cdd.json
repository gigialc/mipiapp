{"ast":null,"code":"var _jsxFileName = \"/Users/georgina/DestigFemmeDemoPi/frontend/src/Shop/components/PostContent.tsx\",\n  _s = $RefreshSig$();\n// Created by Georgina Alacaraz\nimport React, { useContext, useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from \"./Auth\";\nimport { Box, Grid, Typography } from '@mui/material';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst _window = window;\nconst backendURL = _window.__ENV && _window.__ENV.backendURL;\nconst axiosClient = axios.create({\n  baseURL: `${backendURL}`,\n  timeout: 20000,\n  withCredentials: true\n});\nconst config = {\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n};\nexport default function PostContent({\n  communityId\n}) {\n  _s();\n  const {\n    user,\n    saveUser,\n    showModal,\n    saveShowModal,\n    onModalClose\n  } = useContext(UserContext);\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  const location = useLocation();\n  const postId = location.state.postId;\n  console.log(postId);\n\n  // Fetch posts when component mounts\n  useEffect(() => {\n    console.log(posts);\n  }, [setPosts]);\n\n  // get the posts that have the same community id as the current session\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axiosClient.get(`/posts/posts1?community_id=${communityId}`);\n        setPosts(response.data.posts || []);\n      } catch (error) {\n        console.error(\"Failed to fetch posts: \", error);\n      }\n    };\n    fetchPosts();\n  }, [communityId]); // Empty dependency array means this effect runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1,\n      margin: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      justifyContent: \"center\",\n      children: Array.isArray(posts) && posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(ButtonBase, {\n          sx: {\n            display: 'block',\n            textAlign: 'initial',\n            width: '100%'\n          },\n          onClick: () => navigate(\"/comments\", {\n            state: {\n              postId: post._id\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              fontWeight: 'bold',\n              color: '#333',\n              marginBottom: 1\n            },\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            children: post.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          textAlign: \"center\",\n          children: \"There are no posts in this community :(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(PostContent, \"HZD6srve54t0V5sjIrS1/LQkkFA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = PostContent;\n;\nvar _c;\n$RefreshReg$(_c, \"PostContent\");","map":{"version":3,"names":["React","useContext","useEffect","useState","axios","useNavigate","UserContext","Box","Grid","Typography","ButtonBase","useLocation","jsxDEV","_jsxDEV","_window","window","backendURL","__ENV","axiosClient","create","baseURL","timeout","withCredentials","config","headers","PostContent","communityId","_s","user","saveUser","showModal","saveShowModal","onModalClose","navigate","posts","setPosts","location","postId","state","console","log","fetchPosts","response","get","data","error","sx","flexGrow","margin","children","container","spacing","justifyContent","Array","isArray","length","map","post","item","xs","md","display","textAlign","width","onClick","_id","variant","fontWeight","color","marginBottom","title","fileName","_jsxFileName","lineNumber","columnNumber","description","_c","$RefreshReg$"],"sources":["/Users/georgina/DestigFemmeDemoPi/frontend/src/Shop/components/PostContent.tsx"],"sourcesContent":["// Created by Georgina Alacaraz\nimport React, { useContext, useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from \"./Auth\";\nimport { PostType, UserContextType } from \"./Types\";\nimport { set } from \"mongoose\";\nimport { Box, Grid, Typography, Card, CardContent } from '@mui/material';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport CardActions from '@mui/material/CardActions';\nimport IconButton from '@mui/material/IconButton';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport { PodcastsOutlined, PostAddOutlined } from \"@mui/icons-material\";\nimport CommentContent from \"./CommentContent\";\n\n\ninterface WindowWithEnv extends Window {\n  __ENV?: {\n    backendURL: string, // REACT_APP_BACKEND_URL environment variable\n    sandbox: \"true\" | \"false\", // REACT_APP_SANDBOX_SDK environment variable - string, not boolean!\n  }\n}\n\nconst _window: WindowWithEnv = window;\nconst backendURL = _window.__ENV && _window.__ENV.backendURL;\n\nconst axiosClient = axios.create({ baseURL: `${backendURL}`, timeout: 20000, withCredentials: true });\nconst config = { headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' } };\n\nexport default function PostContent({ communityId }: { communityId: string }) {\n  const { user, saveUser, showModal, saveShowModal, onModalClose } = useContext(UserContext) as UserContextType;\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState<PostType[]>([]);\n\n  const location = useLocation();\n  const postId = location.state.postId;\n  console.log(postId);\n \n  // Fetch posts when component mounts\n  useEffect(() => {\n    console.log(posts);\n  }, [setPosts]);\n  \n  // get the posts that have the same community id as the current session\n  useEffect(() => {\n      const fetchPosts = async () => {\n          try {\n              const response = await axiosClient.get(`/posts/posts1?community_id=${communityId}`);\n              setPosts(response.data.posts || []);\n          } catch (error) {\n              console.error(\"Failed to fetch posts: \", error);\n          }\n      };\n      fetchPosts();\n  }, [communityId]);// Empty dependency array means this effect runs once on mount\n\n  return (\n    <Box sx={{ flexGrow: 1, margin: 3 }}>\n      <Grid container spacing={2} justifyContent=\"center\">\n        {Array.isArray(posts) && posts.length > 0 ? (\n          posts.map((post) => (\n            <Grid item xs={12} md={8} key={post._id}>\n              {/* Use ButtonBase for clickable area if needed */}\n              <ButtonBase \n                sx={{ display: 'block', textAlign: 'initial', width: '100%' }} \n                onClick={() => navigate(\"/comments\", { state: { postId: post._id } })}\n              >\n                <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#333', marginBottom: 1 }}>\n                  {post.title}\n                </Typography>\n                <Typography variant=\"body1\" color=\"text.secondary\">\n                  {post.description}\n                </Typography>\n              </ButtonBase>\n            </Grid>\n          ))\n        ) : (\n          <Grid item xs={12}>\n            <Typography textAlign=\"center\">\n              There are no posts in this community :(\n            </Typography>\n          </Grid>\n        )}\n      </Grid>\n    </Box>\n  );\n\n};\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,QAAQ;AAGpC,SAASC,GAAG,EAAEC,IAAI,EAAEC,UAAU,QAA2B,eAAe;AACxE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgB/C,MAAMC,OAAsB,GAAGC,MAAM;AACrC,MAAMC,UAAU,GAAGF,OAAO,CAACG,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACD,UAAU;AAE5D,MAAME,WAAW,GAAGd,KAAK,CAACe,MAAM,CAAC;EAAEC,OAAO,EAAG,GAAEJ,UAAW,EAAC;EAAEK,OAAO,EAAE,KAAK;EAAEC,eAAe,EAAE;AAAK,CAAC,CAAC;AACrG,MAAMC,MAAM,GAAG;EAAEC,OAAO,EAAE;IAAE,cAAc,EAAE,kBAAkB;IAAE,6BAA6B,EAAE;EAAI;AAAE,CAAC;AAEtG,eAAe,SAASC,WAAWA,CAAC;EAAEC;AAAqC,CAAC,EAAE;EAAAC,EAAA;EAC5E,MAAM;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,aAAa;IAAEC;EAAa,CAAC,GAAG/B,UAAU,CAACK,WAAW,CAAoB;EAC7G,MAAM2B,QAAQ,GAAG5B,WAAW,CAAC,CAAC;EAC9B,MAAM,CAAC6B,KAAK,EAAEC,QAAQ,CAAC,GAAGhC,QAAQ,CAAa,EAAE,CAAC;EAElD,MAAMiC,QAAQ,GAAGzB,WAAW,CAAC,CAAC;EAC9B,MAAM0B,MAAM,GAAGD,QAAQ,CAACE,KAAK,CAACD,MAAM;EACpCE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;;EAEnB;EACAnC,SAAS,CAAC,MAAM;IACdqC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;EACpB,CAAC,EAAE,CAACC,QAAQ,CAAC,CAAC;;EAEd;EACAjC,SAAS,CAAC,MAAM;IACZ,MAAMuC,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMxB,WAAW,CAACyB,GAAG,CAAE,8BAA6BjB,WAAY,EAAC,CAAC;QACnFS,QAAQ,CAACO,QAAQ,CAACE,IAAI,CAACV,KAAK,IAAI,EAAE,CAAC;MACvC,CAAC,CAAC,OAAOW,KAAK,EAAE;QACZN,OAAO,CAACM,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ,CAAC;IACDJ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACf,WAAW,CAAC,CAAC,CAAC;;EAElB,oBACEb,OAAA,CAACN,GAAG;IAACuC,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAE;IAAAC,QAAA,eAClCpC,OAAA,CAACL,IAAI;MAAC0C,SAAS;MAACC,OAAO,EAAE,CAAE;MAACC,cAAc,EAAC,QAAQ;MAAAH,QAAA,EAChDI,KAAK,CAACC,OAAO,CAACpB,KAAK,CAAC,IAAIA,KAAK,CAACqB,MAAM,GAAG,CAAC,GACvCrB,KAAK,CAACsB,GAAG,CAAEC,IAAI,iBACb5C,OAAA,CAACL,IAAI;QAACkD,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAAAX,QAAA,eAEvBpC,OAAA,CAACH,UAAU;UACToC,EAAE,EAAE;YAAEe,OAAO,EAAE,OAAO;YAAEC,SAAS,EAAE,SAAS;YAAEC,KAAK,EAAE;UAAO,CAAE;UAC9DC,OAAO,EAAEA,CAAA,KAAM/B,QAAQ,CAAC,WAAW,EAAE;YAAEK,KAAK,EAAE;cAAED,MAAM,EAAEoB,IAAI,CAACQ;YAAI;UAAE,CAAC,CAAE;UAAAhB,QAAA,gBAEtEpC,OAAA,CAACJ,UAAU;YAACyD,OAAO,EAAC,IAAI;YAACpB,EAAE,EAAE;cAAEqB,UAAU,EAAE,MAAM;cAAEC,KAAK,EAAE,MAAM;cAAEC,YAAY,EAAE;YAAE,CAAE;YAAApB,QAAA,EACjFQ,IAAI,CAACa;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,eACb7D,OAAA,CAACJ,UAAU;YAACyD,OAAO,EAAC,OAAO;YAACE,KAAK,EAAC,gBAAgB;YAAAnB,QAAA,EAC/CQ,IAAI,CAACkB;UAAW;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC,GAZgBjB,IAAI,CAACQ,GAAG;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAajC,CACP,CAAC,gBAEF7D,OAAA,CAACL,IAAI;QAACkD,IAAI;QAACC,EAAE,EAAE,EAAG;QAAAV,QAAA,eAChBpC,OAAA,CAACJ,UAAU;UAACqD,SAAS,EAAC,QAAQ;UAAAb,QAAA,EAAC;QAE/B;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IACP;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAGV;AAAC/C,EAAA,CA1DuBF,WAAW;EAAA,QAEhBpB,WAAW,EAGXM,WAAW;AAAA;AAAAiE,EAAA,GALNnD,WAAW;AA0DlC;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}