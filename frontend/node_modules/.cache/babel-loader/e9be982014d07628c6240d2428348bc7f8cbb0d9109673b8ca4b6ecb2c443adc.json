{"ast":null,"code":"var _jsxFileName = \"/Users/georgina/DestigFemmeDemoPi/frontend/src/Shop/components/comments.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Stack } from '@mui/material';\nimport { UserContext } from \"../components/Auth\";\nimport { useLocation } from 'react-router-dom';\n\n// Make TS accept the existence of our window.__ENV object - defined in index.html:\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst _window = window;\nconst backendURL = _window.__ENV && _window.__ENV.backendURL;\nconst axiosClient = axios.create({\n  baseURL: `${backendURL}`,\n  timeout: 20000,\n  withCredentials: true\n});\nconst config = {\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}; // Add null check\n\nexport default function Comments() {\n  _s();\n  const [description, setDescription] = useState('');\n  const [descriptionError, setDescriptionError] = useState(null);\n  const {\n    user,\n    showModal,\n    saveShowModal,\n    onModalClose,\n    addCommunityToUser\n  } = useContext(UserContext);\n  const location = useLocation();\n  const communityId = location.state.communityId;\n  console.log(communityId);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!description.trim()) {\n      setDescriptionError('Description is required');\n      return;\n    }\n    if (user.uid === \"\") {\n      saveShowModal(true);\n      return; // Exit if user is not signed in\n    }\n\n    orderProduct('Comment', 1, {\n      communityId\n    }); // Call orderProduct with postId\n  };\n\n  const orderProduct = async (memo, amount, paymentMetadata) => {\n    if (user.uid === \"\") {\n      console.log(\"User not signed in.\");\n      return saveShowModal(true);\n    }\n    const paymentData = {\n      amount,\n      memo,\n      metadata: paymentMetadata\n    };\n    const callbacks = {\n      onReadyForServerApproval: () => console.log(\"Ready for server approval.\"),\n      onReadyForServerCompletion: () => console.log(\"Payment completed.\"),\n      // Implement onCancel and onError for comprehensive debugging and user feedback\n      onCancel: () => console.log(\"Payment cancelled.\")\n    };\n    console.log(\"Initiating payment...\");\n    // Assuming `createPayment` method correctly updates a state or a similar mechanism to track payment completion\n    try {\n      const payment = await window.Pi.createPayment(paymentData, callbacks);\n\n      // Check if payment was successful based on your payment completion logic (not directly from `payment` object as it's just an example)\n      console.log(\"Checking payment status...\");\n      // Assuming you have a way to verify payment was completed successfully, e.g., through state updated in the callbacks\n      if (true) {\n        // Replace this condition with your actual verification logic\n        console.log(\"Payment was successful\");\n\n        // Here, you prepare the data for submission after payment success\n        const data = {\n          description,\n          postId: communityId,\n          // Ensure this is the correct identifier for your post\n          user_id: user.uid // Directly using user.uid since you checked it's not empty\n        };\n\n        axiosClient.post('/posts/comments', data, config).then(response => {\n          console.log(\"Comment posted successfully:\", response);\n          saveShowModal(true);\n        }).catch(error => {\n          console.log(\"Failed to post comment:\", error);\n        });\n      } else {\n        console.log(\"Payment not completed.\");\n      }\n    } catch (error) {\n      console.error(\"An error occurred during payment or post creation:\", error);\n    }\n  };\n  const onDescriptionChange = event => {\n    setDescription(event.target.value);\n    if (descriptionError) setDescriptionError(null); // Reset error when user starts typing\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '32px',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        sx: {\n          width: '80%',\n          margin: 'auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"description\",\n          label: \"Comment\",\n          variant: \"outlined\",\n          value: description,\n          onChange: onDescriptionChange,\n          error: !!descriptionError,\n          helperText: descriptionError || '',\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '40%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: '50%',\n        padding: '20px',\n        border: '1px solid #ccc',\n        borderRadius: '4px',\n        backgroundColor: '#fff',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your comment has been submitted.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onModalClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_s(Comments, \"3YAYhVTPXgGNU4HQQZ5c4nGy/nA=\", false, function () {\n  return [useLocation];\n});\n_c = Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useContext","useState","axios","TextField","Button","Stack","UserContext","useLocation","jsxDEV","_jsxDEV","_window","window","backendURL","__ENV","axiosClient","create","baseURL","timeout","withCredentials","config","headers","Comments","_s","description","setDescription","descriptionError","setDescriptionError","user","showModal","saveShowModal","onModalClose","addCommunityToUser","location","communityId","state","console","log","handleSubmit","event","preventDefault","trim","uid","orderProduct","memo","amount","paymentMetadata","paymentData","metadata","callbacks","onReadyForServerApproval","onReadyForServerCompletion","onCancel","payment","Pi","createPayment","data","postId","user_id","post","then","response","catch","error","onDescriptionChange","target","value","style","padding","textAlign","children","onSubmit","spacing","sx","width","margin","id","label","variant","onChange","helperText","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","type","color","position","top","left","transform","border","borderRadius","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["/Users/georgina/DestigFemmeDemoPi/frontend/src/Shop/components/comments.tsx"],"sourcesContent":["import React, { CSSProperties, useContext, useState } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Stack, colors, FormControl } from '@mui/material';\nimport { UserContext } from \"../components/Auth\";\nimport { UserContextType } from './Types';\nimport { useLocation } from 'react-router-dom';\nimport { MyPaymentMetadata } from './Types';\nimport { onReadyForServerApproval, onReadyForServerCompletion } from './Payments';\n\n// Make TS accept the existence of our window.__ENV object - defined in index.html:\ninterface WindowWithEnv extends Window {\n  __ENV?: {\n    backendURL: string, // REACT_APP_BACKEND_URL environment variable\n    sandbox: \"true\" | \"false\", // REACT_APP_SANDBOX_SDK environment variable - string, not boolean!\n  }\n}\n\nconst _window: WindowWithEnv = window;\nconst backendURL = _window.__ENV && _window.__ENV.backendURL;\n\nconst axiosClient = axios.create({ baseURL: `${backendURL}`, timeout: 20000, withCredentials: true});\nconst config = {headers: {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'}}; // Add null check\n\nexport default function Comments() {\n    const [description, setDescription] = useState<string>('');\n    const [descriptionError, setDescriptionError] = useState<string | null>(null);\n    const { user, showModal, saveShowModal, onModalClose, addCommunityToUser } = useContext(UserContext) as UserContextType;\n    const location = useLocation();\n    const communityId = location.state.communityId;\n    console.log(communityId);\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (!description.trim()) {\n            setDescriptionError('Description is required');\n            return;\n        }\n\n        if(user.uid === \"\") {\n            saveShowModal(true);\n            return; // Exit if user is not signed in\n        }\n\n        orderProduct('Comment', 1, { communityId }); // Call orderProduct with postId\n    };\n\n    const orderProduct = async (memo: string, amount: number, paymentMetadata: MyPaymentMetadata) => {\n        if (user.uid === \"\") {\n            console.log(\"User not signed in.\");\n            return saveShowModal(true);\n        }\n    \n        const paymentData = { amount, memo, metadata: paymentMetadata };\n        const callbacks = {\n            onReadyForServerApproval: () => console.log(\"Ready for server approval.\"),\n            onReadyForServerCompletion: () => console.log(\"Payment completed.\"),\n            // Implement onCancel and onError for comprehensive debugging and user feedback\n            onCancel: () => console.log(\"Payment cancelled.\"),\n        };\n    \n        console.log(\"Initiating payment...\");\n        // Assuming `createPayment` method correctly updates a state or a similar mechanism to track payment completion\n        try {\n            const payment = await window.Pi.createPayment(paymentData, callbacks);\n    \n            // Check if payment was successful based on your payment completion logic (not directly from `payment` object as it's just an example)\n            console.log(\"Checking payment status...\");\n            // Assuming you have a way to verify payment was completed successfully, e.g., through state updated in the callbacks\n            if (true) { // Replace this condition with your actual verification logic\n                console.log(\"Payment was successful\");\n    \n                // Here, you prepare the data for submission after payment success\n                const data = {\n                    description,\n                    postId: communityId, // Ensure this is the correct identifier for your post\n                    user_id: user.uid, // Directly using user.uid since you checked it's not empty\n                };\n    \n                axiosClient.post('/posts/comments', data, config)\n                    .then((response) => {\n                        console.log(\"Comment posted successfully:\", response);\n                        saveShowModal(true);\n                    })\n                    .catch((error) => {\n                        console.log(\"Failed to post comment:\", error);\n                    });\n            } else {\n                console.log(\"Payment not completed.\");\n            }\n        } catch (error) {\n            console.error(\"An error occurred during payment or post creation:\", error);\n        }\n    };\n    \n\n    const onDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDescription(event.target.value);\n        if(descriptionError) setDescriptionError(null); // Reset error when user starts typing\n    };\n    \n\n    return (\n        <div style={{ padding: '32px', textAlign: 'center' }}>\n            <form onSubmit={handleSubmit}>\n                <Stack spacing={2} sx={{ width: '80%', margin: 'auto' }}>\n                    <TextField\n                        id=\"description\"\n                        label=\"Comment\"\n                        variant=\"outlined\"\n                        value={description}\n                        onChange={onDescriptionChange}\n                        error={!!descriptionError}\n                        helperText={descriptionError || ''}\n                        fullWidth\n                    />\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                        Submit\n                    </Button>\n                </Stack>\n            </form>\n            {showModal && (\n                <div style={{ position: 'absolute', top: '40%', left: '50%', transform: 'translate(-50%, -50%)', width: '50%', padding: '20px', border: '1px solid #ccc', borderRadius: '4px', backgroundColor: '#fff', textAlign: 'center' }}>\n                    <p>Your comment has been submitted.</p>\n                    <Button onClick={onModalClose}>Close</Button>\n                </div>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}