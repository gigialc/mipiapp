{"ast":null,"code":"var _jsxFileName = \"/Users/georgina/DestigFemmeDemoPi/frontend/src/Shop/components/CommentContent.tsx\",\n  _s = $RefreshSig$();\n//Created by Georgina Alacaraz\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport { UserContext } from './Auth';\nimport { Paper } from '@mui/material';\nimport { Typography } from '@mui/material';\nimport { IconButton } from '@mui/material';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst _window = window;\nconst backendURL = _window.__ENV && _window.__ENV.backendURL;\nconst axiosClient = axios.create({\n  baseURL: `${backendURL}`,\n  timeout: 20000,\n  withCredentials: true\n});\nconst config = {\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n};\nexport default function CommentContent() {\n  _s();\n  const {\n    user,\n    saveUser,\n    showModal,\n    saveShowModal,\n    onModalClose\n  } = React.useContext(UserContext);\n  const [comment, setComment] = useState([]);\n  const [post, setPost] = useState(null);\n  const location = useLocation();\n  const postId = location.state.postId;\n  console.log(postId);\n\n  // get the posts that have the same community id as the current session\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await axiosClient.get(`/comments/commentsByPostId?post_id=${postId}`);\n        setComment(response.data.comments || []);\n      } catch (error) {\n        console.error(\"Failed to fetch comments: \", error);\n      }\n    };\n    if (postId) {\n      // Only fetch comments if postId is available\n      fetchComments();\n    }\n  }, [postId]);\n  useEffect(() => {\n    if (!postId) return; // Add a guard clause if communityId is not set\n    console.log(postId);\n    axiosClient.get(`/posts/post/${postId}`) // Use template literals to inject communityId\n    .then(response => {\n      console.log(response.data);\n      setPost(response.data); // Assuming you want to set the entire response object\n    }).catch(error => {\n      console.error(error);\n    });\n  }, [postId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '600px',\n      margin: '1',\n      textAlign: 'left'\n    },\n    children: [(post === null || post === void 0 ? void 0 : post.title) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        margin: 1,\n        style: {\n          color: '#9E4291',\n          fontWeight: 'bold'\n        },\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handlePostLike,\n        children: /*#__PURE__*/_jsxDEV(ThumbUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        style: {\n          color: '#9E4291'\n        },\n        children: [postLikes, \" likes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), (post === null || post === void 0 ? void 0 : post.description) && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      margin: 1,\n      style: {\n        color: 'black'\n      },\n      children: post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), comment.length > 0 ? comment.map((comment, index) => /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        backgroundColor: '#F0F0F0',\n        marginY: 2,\n        padding: 2,\n        borderRadius: '20px',\n        position: 'relative' // Added for positioning like button\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        component: \"div\",\n        sx: {\n          wordBreak: 'break-word'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold',\n            marginRight: '8px',\n            color: '#9E4291'\n          },\n          children: [comment.user.username || 'Anonymous', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this), comment.content]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => handleCommentLike(index),\n        style: {\n          position: 'absolute',\n          top: 0,\n          right: 0\n        } // Position like button\n        ,\n        children: /*#__PURE__*/_jsxDEV(ThumbUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        style: {\n          color: '#9E4291',\n          position: 'absolute',\n          bottom: 0,\n          right: 0\n        },\n        children: [commentLikes[index], \" likes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this)) :\n    /*#__PURE__*/\n    // Display a message if there are no comments\n    _jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      style: {\n        marginTop: '5px',\n        fontStyle: \"italic\",\n        color: '#9E4291'\n      },\n      children: \"There are no comments, be the first :)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentContent, \"Q89tG0iInAqv+GO4Rcvf43L2Fqg=\", false, function () {\n  return [useLocation];\n});\n_c = CommentContent;\n;\nvar _c;\n$RefreshReg$(_c, \"CommentContent\");","map":{"version":3,"names":["React","useEffect","useState","axios","useLocation","UserContext","Paper","Typography","IconButton","ThumbUpIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","_window","window","backendURL","__ENV","axiosClient","create","baseURL","timeout","withCredentials","config","headers","CommentContent","_s","user","saveUser","showModal","saveShowModal","onModalClose","useContext","comment","setComment","post","setPost","location","postId","state","console","log","fetchComments","response","get","data","comments","error","then","catch","style","maxWidth","margin","textAlign","children","title","variant","color","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handlePostLike","postLikes","description","length","map","index","elevation","sx","backgroundColor","marginY","padding","borderRadius","position","component","wordBreak","marginRight","username","content","handleCommentLike","top","right","bottom","commentLikes","marginTop","fontStyle","_c","$RefreshReg$"],"sources":["/Users/georgina/DestigFemmeDemoPi/frontend/src/Shop/components/CommentContent.tsx"],"sourcesContent":["//Created by Georgina Alacaraz\n\nimport { Button, Grid } from '@mui/material';\nimport { StringDecoder } from 'string_decoder';\nimport { UserContextType } from './Types';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport { UserContext } from './Auth';\nimport { Paper } from '@mui/material';\nimport { Card, CardContent, Typography } from '@mui/material';\nimport { IconButton } from '@mui/material';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\n\n\ninterface WindowWithEnv extends Window {\n  __ENV?: {\n    backendURL: string, // REACT_APP_BACKEND_URL environment variable\n    sandbox: \"true\" | \"false\", // REACT_APP_SANDBOX_SDK environment variable - string, not boolean!\n  }\n}\n\nconst _window: WindowWithEnv = window;\nconst backendURL = _window.__ENV && _window.__ENV.backendURL;\n\nconst axiosClient = axios.create({ baseURL: `${backendURL}`, timeout: 20000, withCredentials: true });\nconst config = { headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' } };\n\nexport default function CommentContent() {\n  const { user, saveUser, showModal, saveShowModal, onModalClose } = React.useContext(UserContext) as UserContextType;\n  const [comment, setComment] = useState<{ content: string, user: { username: string } }[]>([]);\n  const [post, setPost] = useState<any>(null);\n  const location = useLocation();\n  const postId = location.state.postId;\n  console.log(postId);\n\n    // get the posts that have the same community id as the current session\n    useEffect(() => {\n      const fetchComments = async () => {\n          try {\n              const response = await axiosClient.get(`/comments/commentsByPostId?post_id=${postId}`);\n              setComment(response.data.comments || []);\n          } catch (error) {\n              console.error(\"Failed to fetch comments: \", error);\n          }\n      };\n      if (postId) { // Only fetch comments if postId is available\n          fetchComments();\n      }\n  }, [postId]);\n\n  \n  useEffect(() => {\n    if (!postId) return; // Add a guard clause if communityId is not set\n  console.log(postId);\n    axiosClient.get(`/posts/post/${postId}`) // Use template literals to inject communityId\n      .then((response) => {\n        console.log(response.data);\n        setPost(response.data); // Assuming you want to set the entire response object\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [postId]);\n  \n  return (\n    <div style={{ maxWidth: '600px', margin: '1', textAlign: 'left' }}>\n      {post?.title && (\n        <>\n          <Typography variant=\"h5\" margin={1} style={{ color: '#9E4291', fontWeight: 'bold' }}>\n            {post.title}\n          </Typography>\n          <IconButton onClick={handlePostLike}>\n            <ThumbUpIcon />\n          </IconButton>\n          <Typography variant=\"body2\" style={{ color: '#9E4291' }}>{postLikes} likes</Typography>\n        </>\n      )}\n      {post?.description && (\n        <Typography variant=\"body1\" margin={1} style={{ color: 'black' }}>\n          {post.description}\n        </Typography>\n      )}\n      <br />\n      {comment.length > 0 ? (\n        comment.map((comment, index) => (\n          <Paper\n            key={index}\n            elevation={3}\n            sx={{\n              backgroundColor: '#F0F0F0',\n              marginY: 2,\n              padding: 2,\n              borderRadius: '20px',\n              position: 'relative', // Added for positioning like button\n            }}\n          >\n            {/* Combine the username and comment content */}\n            <Typography variant=\"body1\" component=\"div\" sx={{ wordBreak: 'break-word' }}>\n              <span style={{ fontWeight: 'bold', marginRight: '8px', color: '#9E4291' }}>\n                {comment.user.username || 'Anonymous'}:\n              </span>\n              {comment.content}\n            </Typography>\n            <IconButton\n              onClick={() => handleCommentLike(index)}\n              style={{ position: 'absolute', top: 0, right: 0 }} // Position like button\n            >\n              <ThumbUpIcon />\n            </IconButton>\n            <Typography variant=\"body2\" style={{ color: '#9E4291', position: 'absolute', bottom: 0, right: 0 }}>\n              {commentLikes[index]} likes\n            </Typography>\n          </Paper>\n        ))\n      ) : (\n        // Display a message if there are no comments\n        <Typography variant=\"subtitle2\" style={{ marginTop: '5px', fontStyle: \"italic\", color: '#9E4291' }}>\n          There are no comments, be the first :)\n        </Typography>\n      )}\n    </div>\n  );\n\n};\n\n  \n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}